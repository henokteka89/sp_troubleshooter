USE [admin]
GO
/****** Object:  StoredProcedure [dbo].[usp_PerformanceTroubleshooter]    Script Date: 9/23/2024 3:44:28 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
ALTER   PROCEDURE [dbo].[usp_PerformanceTroubleshooter] 
    @ProcedureName SYSNAME = NULL,      -- Name of the stored procedure to troubleshoot
    @QueryText NVARCHAR(MAX) = NULL,    -- Alternatively, a snippet of the query text
    @DatabaseName SYSNAME = NULL,        -- Name of the database containing the procedure or queries
	@tableanalysis bit = 0 ,
	@querystoreanalysis  bit = 0
AS
/*
-- test
	admin.dbo.[usp_PerformanceTroubleshooter]  'usp_somecomplexity', null, 'stackoverflow2013', 1, @querystoreanalysis = 1
*/
BEGIN
    SET NOCOUNT ON;

    -- Validate input
    IF @ProcedureName IS NULL AND @QueryText IS NULL
    BEGIN
        RAISERROR('You must provide either a stored procedure name or a query text snippet.', 16, 1);
        RETURN;
    END

    IF @DatabaseName IS NULL
    BEGIN
        SET @DatabaseName = DB_NAME();  -- Default to current database if not specified
    END

    DECLARE @object_id INT = NULL;

    IF @ProcedureName IS NOT NULL
    BEGIN
        -- Get object_id from the specified database
        SET @object_id = OBJECT_ID(QUOTENAME(@DatabaseName) + '.' + QUOTENAME(SCHEMA_NAME()) + '.' + QUOTENAME(@ProcedureName));
        IF @object_id IS NULL
        BEGIN
            RAISERROR('Stored procedure "%s" does not exist in database "%s".', 16, 1, @ProcedureName, @DatabaseName);
            RETURN;
        END
    END

    -- Temporary table to store execution stats
    CREATE TABLE #ExecStats (
        sql_handle VARBINARY(64),
        plan_handle VARBINARY(64),
        query_hash BINARY(8),
        execution_count BIGINT,
        total_worker_time BIGINT,
        total_elapsed_time BIGINT,
        total_logical_reads BIGINT,
        total_logical_writes BIGINT,
        total_physical_reads BIGINT,
        min_worker_time BIGINT,
        max_worker_time BIGINT,
        min_elapsed_time BIGINT,
        max_elapsed_time BIGINT,
        creation_time DATETIME,
        last_execution_time DATETIME,
        query_text NVARCHAR(MAX),
        object_id INT,
        statement_start_offset INT,
        statement_end_offset INT,
        dbid SMALLINT
    );

    -- Collect execution statistics
    INSERT INTO #ExecStats
    SELECT
        qs.sql_handle,
        qs.plan_handle,
        qs.query_hash,
        qs.execution_count,
        qs.total_worker_time,
        qs.total_elapsed_time,
        qs.total_logical_reads,
        qs.total_logical_writes,
        qs.total_physical_reads,
        qs.min_worker_time,
        qs.max_worker_time,
        qs.min_elapsed_time,
        qs.max_elapsed_time,
        qs.creation_time,
        qs.last_execution_time,
        SUBSTRING(st.text, (qs.statement_start_offset/2) + 1,
            ((CASE qs.statement_end_offset
                WHEN -1 THEN DATALENGTH(st.text)
                ELSE qs.statement_end_offset
            END - qs.statement_start_offset)/2) + 1) AS query_text,
        st.objectid,
        qs.statement_start_offset,
        qs.statement_end_offset,
        st.dbid
    FROM sys.dm_exec_query_stats qs
    CROSS APPLY sys.dm_exec_sql_text(qs.sql_handle) st
    WHERE
        st.dbid = DB_ID(@DatabaseName) AND
        (
            (@ProcedureName IS NOT NULL AND st.objectid = @object_id)
            OR (@QueryText IS NOT NULL AND st.text LIKE '%' + @QueryText + '%')
        );

    -- Result Set 1: Execution Statistics Summary
    PRINT 'Result Set 1: Execution Statistics Summary';
    SELECT
        CONVERT(VARCHAR(16), qs.query_hash, 1) AS query_id,
        DB_NAME(qs.dbid) AS database_name,
        qs.query_text,
        qs.execution_count,
        qs.total_worker_time / 1000 AS total_cpu_ms,
        (qs.total_worker_time / qs.execution_count) / 1000 AS avg_cpu_ms,
        qs.min_worker_time / 1000 AS min_cpu_ms,
        qs.max_worker_time / 1000 AS max_cpu_ms,
        qs.total_elapsed_time / 1000 AS total_elapsed_ms,
        (qs.total_elapsed_time / qs.execution_count) / 1000 AS avg_elapsed_ms,
        qs.min_elapsed_time / 1000 AS min_elapsed_ms,
        qs.max_elapsed_time / 1000 AS max_elapsed_ms,
        qs.total_logical_reads,
        qs.total_logical_writes,
        qs.total_physical_reads,
        qs.creation_time,
        qs.last_execution_time
    FROM #ExecStats qs
    ORDER BY qs.total_worker_time DESC;

    -- Result Set 2: Execution Plans
    PRINT 'Result Set 2: Execution Plans';
    SELECT
        CONVERT(VARCHAR(16), qs.query_hash, 1) AS query_id,
        DB_NAME(qs.dbid) AS database_name,
        qs.query_text,
        qp.query_plan
    FROM #ExecStats qs
    CROSS APPLY sys.dm_exec_query_plan(qs.plan_handle) qp;

If @tableanalysis = 1
 Begin
DECLARE @SQL NVARCHAR(MAX);

SET @SQL = '
USE ' + QUOTENAME(@DatabaseName) + ';

WITH ReferencedTables AS (
    SELECT 
        referenced_entity_name AS TableName,
        referenced_schema_name AS SchemaName,
        o.object_id AS TableObjectId
    FROM sys.sql_expression_dependencies d
    JOIN sys.objects o ON d.referenced_id = o.object_id
    WHERE referencing_id = OBJECT_ID(''' + QUOTENAME(@DatabaseName) + '.dbo.' + @ProcedureName + ''')
    AND o.type IN (''U'') -- Only User Tables
)
SELECT 
    t.SchemaName,
    t.TableName,
    s.name AS StatsName,
    sp.last_updated AS LastStatsUpdate,
    sp.rows AS [RowCount],
    sp.rows_sampled AS RowsSampled,
    sp.modification_counter AS ModificationsSinceLastUpdate
FROM ReferencedTables t
JOIN sys.stats s ON t.TableObjectId = s.object_id
CROSS APPLY sys.dm_db_stats_properties(s.object_id, s.stats_id) sp
ORDER BY t.SchemaName, t.TableName, sp.last_updated DESC;
';

-- Execute the dynamic SQL string
EXEC sp_executesql @SQL, N'@ProcedureName NVARCHAR(128)', @ProcedureName;

END

IF @querystoreanalysis = 1
BEGIN
    DECLARE @SQL1 NVARCHAR(MAX);

    -- Build the dynamic SQL query for Query Store analysis
    SET @SQL1 = '
    USE ' + QUOTENAME(@DatabaseName) + ';

    WITH QueryDetails AS (
        SELECT 
            qsp.query_id,
            qsp.plan_id,
            qsp.last_execution_time,
            qsp.last_compile_start_time,
            qsp.initial_compile_start_time,
            qsp.avg_compile_duration / 1000.0 AS avg_compile_duration_ms,
            qsp.last_compile_duration / 1000.0 AS last_compile_duration_ms,
            qsp.is_forced_plan,
            qsp.force_failure_count,
            qsp.plan_forcing_type_desc,
            o.name AS proc_name
        FROM sys.query_store_plan qsp
        JOIN sys.query_store_query qsq ON qsp.query_id = qsq.query_id
        JOIN sys.objects o ON qsq.object_id = o.object_id
        WHERE o.name = @ProcedureName
    )
    SELECT
        ''Query ID: '' + CAST(query_id AS NVARCHAR(10)) +
        '', Last Executed: '' + COALESCE(CONVERT(VARCHAR, last_execution_time, 120), ''Never Executed'') +
        '', Initial Compile: '' + COALESCE(CONVERT(VARCHAR, initial_compile_start_time, 120), ''N/A'') +
        '', Last Compile: '' + COALESCE(CONVERT(VARCHAR, last_compile_start_time, 120), ''N/A'') +
        '', Avg Compile Time: '' + CAST(avg_compile_duration_ms AS NVARCHAR(10)) + '' ms'' +
        '', Last Compile Time: '' + CAST(last_compile_duration_ms AS NVARCHAR(10)) + '' ms'' +
        CASE 
            WHEN is_forced_plan = 1 THEN '', Forced Plan: Yes''
            ELSE '', Forced Plan: No''
        END +
        '', Plan Forcing Type: '' + ISNULL(plan_forcing_type_desc, ''None'') +
        CASE 
            WHEN force_failure_count > 0 THEN '', Force Failures: '' + CAST(force_failure_count AS NVARCHAR(10))
            ELSE ''''
        END AS QueryPerformanceSummary
    FROM QueryDetails;
    ';

    -- Execute the dynamic SQL in the specified database
    EXEC sp_executesql @SQL1, N'@ProcedureName NVARCHAR(128)', @ProcedureName;
END;

 

    -- Clean up
    DROP TABLE if exists #ExecStats;
	 
END

 
